///////////////////////////////////////////////////////////////////
//
// MyStudies
//
// Module που παρέχει στατιστικά φοιτητών.
//
///////////////////////////////////////////////////////////////////

#pragma once // #include το πολύ μία φορά

#include "ADTList.h"

// Το MyStudies αποθηκεύει εγγραφές του παρακάτω τύπου.
// _Ολα_ τα πεδία πρέπει να _υπάρχουν_ και να μην είναι NULL.

struct student {
	int id;				// Μοναδικό id της εγγραφής
	String name;		// Όνομά
	String city;		// Πόλη
	int year;			// Ετος εγγραφής
	float gpa;			// Μέσος όρος
};
typedef struct student* Student;


// Αρχικοποιεί όλες τις δομές του MyStudies, πρέπει να κληθεί πριν από οποιαδήποτε άλλη κλήση.
// Αν υπήρχαν ήδη δεδομένα τα διαγράφει καλώντας την ms_destroy.

void ms_init();

// Καταστρέφει όλες τις δομές του MyStudies, απελευθερώνοντας την αντίστοιχη
// μνήμη. ΔΕΝ κάνει free τα Student structs, αυτά δημιουργούνται και καταστρέφονται
// από τον χρήστη.

void ms_destroy();


// Προσθέτει την εγγραφή Student στο MyStudies. Δεν δεσμεύει νέα μνήμη (ούτε
// φτιάχνει αντίγραφα του Student), απλά αποθηκεύει τον pointer (η δέσμευση
// μνήμης για το Student είναι ευθύνη του χρήστη). Αν υπάρχει εγγραφή με το ίδιο
// id η προσθήκη απορρίπτεται και επιστρέφεται false, αν όχι επιστρέφεται true.
//
// Οι αλλαγές στα δεδομένα της εγγραφής απαγορεύονται μέχρι να γίνει remove από
// το MyStudies.

bool ms_insert_student(Student student);

// Αφαιρεί την εγγραφή με το συγκεκριμένο id από το σύστημα (χωρίς free, είναι
// ευθύνη του χρήστη). Επιστρέφει true αν υπήρχε τέτοια εγγραφή, αλλιώς false.

bool ms_remove_student(int id);


// Queries
//
// Στις συναρτήσεις που επιστρέφουν λίστα, η λίστα δημιουργείται την ώρα της
// κλήσης και είναι ευθύνη του χρήστη να καλέσει τη list_destroy (η οποία θα
// ελευθερώσει μόνο τη λίστα, όχι τα δεδομένα).


// Επιστρέφει τον φοιτητή με το συγκεκριμένο id (NULL αν δεν υπάρχει).

Student ms_get_student(int id);

// Επιστρέφει τον συνολικό αριθμό φοιτητών

int ms_count_all();

// Επιστρέφει τον αριθμό φοιτητών με έτος εγγραφής year

int ms_count_by_year(int year);

// Επιστρέφει τους number φοιτητές με μεγαλύτερο μέσο όρο για το έτος year,
// σε φθίνουσα σειρά μέσου όρου.

List ms_top_by_year(int year, int number);

// Επιστρέφει τους number φοιτητές με μικρότερο μέσο όρο, για το έτος year,
// σε αύξουσα σειρά μέσου όρου.

List ms_bottom_by_year(int year, int number);

// Επιστρέφει τον μέσο όρο όλων των φοιτητών του έτους year
// (0 αν δεν υπάρχουν φοιτητές).

float ms_average_by_year(int year);

// Επιστρέφει την k-οστή πιο "δημοφιλή" πόλη, με βάση την
// κατοικία των φοιτητών (NULL αν υπάρχουν λιγότερο από k πόλεις).

String ms_city_rank(int k);
